  ATTAK_TYPE : enum{PHYSICAL, MAGIC}
  
class PokemonBase
  int bloodPoints;
  int experiencePoints;
  
  ATTAK_TYPE attackType;
  int attackValue;
  int level;
  string symbol;
  string name;
  int id; // generated to be different for each Pokemon
  
  bool operator=(Pokemon){
    return true if same id
  }

  - levelUp()
  {
    //experienceLimit increase
    level +=1
    attackValue *= level //to define
  }

  + int getAttackValueFor(type){
    if(attackType == PHYSICAL){
      return attackValue* (level/ 1.5)
    }
  }
  + reduceLifePoints(int points)
  - gainExperince(int points)

  + recover(){
    // recover from a percentage each round
  }
}
    

  class Game{
    vector<Player> players;
    map<name, Pokemon> pokemonTypes;
    vector<Pokemon> activePokenmons;
    
    loop(){
      attack(&attaker, &defender){
        int value = attacker.getAttackValueFor(defender.type);
        defender.reduceLifePoints(value); // decrease life...
        attacker.gainExperience(int);
        
      }

      // each round we call recover for all the pokemons
    }
    
  }
  


class Player
  string name;
  vector<Pokemon> pokemons;
  int score;

  // return true if player win ?
  bool attack(Pokemon& defender, Pokemer& attecker){
    // Pokemon attacker is generated
    // if the player win: score += attacker.gainExperience
  
  };


Main{
  list<Pokmeon> environment //generated, for example #10
  Player pl1, pl2
  loop (#rounds){
    Pokemon fromUser // genereted
    pl1.setPokemon(fromUser);
    Pokemon aPokemonfromEnvironment;

    player.attack(fromUser, aPokemonfromEnvironment);

    
  }
  


